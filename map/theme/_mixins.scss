// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// Responsive manager
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
/// @link http://sass-guidelin.es/#breakpoint-manager Sass Guidelines - Breakpoint Manager
@mixin respond-to($breakpoint) {
  $query: map-get($breakpoints, $breakpoint);

  @if not $query {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }

  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}

/// ALIGN CENTER ELEMENTS

@mixin alignCenter() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/**
 * took the $num first elements nth-child
 */
@mixin firstNthChild($num) {
  @if $num == 1 {
    &:first-child {
      @content;
    }
  }
  @else {
    &:nth-child(-n + #{$num}) {
      @content;
    }
  }
}
/**
 * took the $num lasts elements nth-child
 */
@mixin lastNthChild($num) {
  &:nth-last-child(-n + #{$num}) {
    @content;
  }
}

/**
 *  Erase margin for X-Y directions
 */
@mixin noMargin($directions: ()){
  @each $direction in $directions {
    margin-#{$direction}: 0 $imp;
  }
}
/**
 *  Erase padding for X-Y directions
 */
@mixin noPadding($directions: ()){
  @each $direction in $directions {
    padding-#{$direction}: 0 $imp;
  }
}

@mixin alignContainer() {
  position: relative;
  transform-style: preserve-3d;
}

/**
 * args $typo : typo
 * args $size : font-size
 * args $line-height : by default (font-size)
 * args $font-weight : by default (300)
 * args $color : by default (inherit)
 */
@mixin font($typo, $size, $line-height:$size, $weight:300, $color:inherit) {
  font-family: $typo;
  font-size: $size + px;
  color: $color;
  line-height: $line-height + px;
  font-weight: $weight;
}

@mixin alignXObject() {
  position: absolute;
  left: 50%;
  right: 50%;
  transform: translateX(-50%);
}

@mixin alignYObject() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@mixin allAlignObject() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin flex-direction($direction) {
  display: flex;
  flex-direction: $direction;
}

@mixin alignVerticalObject() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@mixin fontSize($sizeValue) {
  font-size: $sizeValue * 1px;
}

@mixin fontSizePlus10($sizeValue) {
  font-size: ($sizeValue + 10) + px;
}

/**
 * PREFIXER FOR ANY CSS PROPERTY
 * args $property : name of your property
 * args $value : value refered to
 * array $prefixes : all your prefixes (moz o webkit for instance)
 */
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }

  // Output standard non-prefixed declaration
  #{$property}: $value;
}

@mixin paddings($values: ()) {
  @each $value in $values {
    @include makePaddings(nth($value, 1), nth($value, 2));
  }
}

@mixin makePaddings($val,$col) {
  padding-#{$val}: #{$col}px;
}

@mixin svgBeforeElement($typo, $code, $fontSize, $color){
  &:before {
    font-family: $typo;
    content: $code;
    font-size: $fontSize + px;
    color: $color;
    // condition on lock svg
    @if($code == '\e902'){
      // make a exception
    }
  }
}

/**
 * Enter $media value define to max or min
 * args $value-max : at a minimum
 * args $value-min : is optional to create a between
 */
@mixin mediaQuerries($media, $value-max, $value-min: false) {
  @if $media == max {
    @media only screen and (max-width: $value-max+px) {
      @content;
    }
  } @else if $media == between {
    @media only screen and (min-width: $value-min+px) and (max-width: $value-max+px) {
      @content;
    }
  } @else if $media == min {
    @media only screen and (min-width: $value-max+px) {
      @content;
    }
  }
}

/**
 * MAKE DUBBLE BORDER CSS ON ELEMENT
 * args $exteriorThickness : thickness of exterior border
 * args $colorExteriorBorder : color of exterior border
 * args $interiorThickness : thickness of interior border
 * args $colorInteriorBorder : color of interior border
 */
@mixin dubbleBorder($exteriorThickness, $colorExteriorBorder, $interiorThickness, $colorInteriorBorder)
{
  border: $exteriorThickness + px solid $colorExteriorBorder;
  position: relative;

  &:before {
    content: '';
    border: $interiorThickness + px solid $colorInteriorBorder;
    display: block;
    background: none;
    position: absolute;
    top: 0px;
    left: 0px;
    right: 0px;
    bottom: 0px;
    pointer-events: none;
    z-index: 1;
  }
}

/**
 * Generate margin & padding top & bottom automatically
 */
@mixin mg-pdGenerator($nbr){
  @for $i from 0 through $nbr {
    .mb-#{$i} {
      margin-bottom: $i + px $imp;
    }

    .mt-#{$i} {
      margin-top: $i + px $imp;
    }

    .pb-#{$i} {
      padding-bottom: $i + px $imp;
    }

    .pt-#{$i} {
      padding-top: $i + px $imp;
    }
  }
}


/**
 * ARROW AFTER ELEMENT CSS
 * args $color : colour of your arrow down
 * TODO complete this to manage direction and size of the arrow
 */
@mixin arrowAfterElement($color)
{
  background-color: $color;
  font-weight: 600;
  line-height: 50px;
  text-align: center;
  font-size: 20px;
  position: relative;

  &::after {
    content: '';
    position: absolute;
    left: 42%;
    top: 100%;
    width: 0;
    height: 0;
    border-left: 20px solid transparent;
    border-right: 20px solid transparent;
    border-top: 20px solid $color;
    clear: both;
  }
}